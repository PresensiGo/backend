// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injectors

import (
	"api/internal/cron"
	"api/internal/handlers"
	"api/internal/repositories"
	"api/internal/services"
	"api/pkg/database"
)

// Injectors from wire.go:

func InitAttendanceHandler() *handlers.Attendance {
	db := database.New()
	attendance := repositories.NewAttendance(db)
	attendanceDetail := repositories.NewAttendanceStudent(db)
	student := repositories.NewStudent(db)
	servicesAttendance := services.NewAttendance(db, attendance, attendanceDetail, student)
	handlersAttendance := handlers.NewAttendance(servicesAttendance)
	return handlersAttendance
}

func InitAuthHandler() *handlers.Auth {
	db := database.New()
	user := repositories.NewUser(db)
	userToken := repositories.NewUserToken(db)
	school := repositories.NewSchool(db)
	auth := services.NewAuth(user, userToken, school, db)
	handlersAuth := handlers.NewAuth(auth)
	return handlersAuth
}

func InitBatchHandler() *handlers.Batch {
	db := database.New()
	batch := repositories.NewBatch(db)
	major := repositories.NewMajor(db)
	classroom := repositories.NewClassroom(db)
	servicesBatch := services.NewBatch(db, batch, major, classroom)
	handlersBatch := handlers.NewBatch(servicesBatch)
	return handlersBatch
}

func InitClassroomHandler() *handlers.Classroom {
	db := database.New()
	classroom := repositories.NewClassroom(db)
	major := repositories.NewMajor(db)
	servicesClassroom := services.NewClassroom(classroom, major)
	handlersClassroom := handlers.NewClassroom(servicesClassroom)
	return handlersClassroom
}

func InitExcelHandler() *handlers.Excel {
	db := database.New()
	batch := repositories.NewBatch(db)
	major := repositories.NewMajor(db)
	classroom := repositories.NewClassroom(db)
	student := repositories.NewStudent(db)
	excel := services.NewExcel(batch, major, classroom, student, db)
	handlersExcel := handlers.NewExcel(excel)
	return handlersExcel
}

func InitLatenessHandler() *handlers.Lateness {
	db := database.New()
	lateness := repositories.NewLateness(db)
	latenessDetail := repositories.NewLatenessDetail(db)
	student := repositories.NewStudent(db)
	major := repositories.NewMajor(db)
	classroom := repositories.NewClassroom(db)
	servicesLateness := services.NewLateness(lateness, latenessDetail, student, major, classroom)
	handlersLateness := handlers.NewLateness(servicesLateness)
	return handlersLateness
}

func InitMajorHandler() *handlers.Major {
	db := database.New()
	major := services.NewMajor(db)
	handlersMajor := handlers.NewMajor(major)
	return handlersMajor
}

func InitResetHandler() *handlers.Reset {
	db := database.New()
	batch := repositories.NewBatch(db)
	lateness := repositories.NewLateness(db)
	reset := services.NewReset(db, batch, lateness)
	handlersReset := handlers.NewReset(reset)
	return handlersReset
}

func InitStudentHandler() *handlers.Student {
	db := database.New()
	major := repositories.NewMajor(db)
	classroom := repositories.NewClassroom(db)
	student := repositories.NewStudent(db)
	servicesStudent := services.NewStudent(major, classroom, student)
	handlersStudent := handlers.NewStudent(servicesStudent)
	return handlersStudent
}

func InitUserTokenCron() *cron.UserToken {
	db := database.New()
	userToken := repositories.NewUserToken(db)
	cronUserToken := cron.NewUserToken(userToken)
	return cronUserToken
}
