// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"api/internal/cron"
	"api/internal/features/attendance/handlers"
	"api/internal/features/attendance/injector"
	repositories2 "api/internal/features/attendance/repositories"
	"api/internal/features/attendance/services"
	handlers2 "api/internal/features/batch/handlers"
	injector2 "api/internal/features/batch/injector"
	repositories6 "api/internal/features/batch/repositories"
	services2 "api/internal/features/batch/services"
	handlers4 "api/internal/features/classroom/handlers"
	injector4 "api/internal/features/classroom/injector"
	repositories5 "api/internal/features/classroom/repositories"
	services4 "api/internal/features/classroom/services"
	handlers6 "api/internal/features/data/handlers"
	injector6 "api/internal/features/data/injector"
	services6 "api/internal/features/data/services"
	handlers3 "api/internal/features/major/handlers"
	injector3 "api/internal/features/major/injector"
	repositories4 "api/internal/features/major/repositories"
	services3 "api/internal/features/major/services"
	repositories8 "api/internal/features/school/repositories"
	handlers5 "api/internal/features/student/handlers"
	injector5 "api/internal/features/student/injector"
	repositories3 "api/internal/features/student/repositories"
	services5 "api/internal/features/student/services"
	handlers8 "api/internal/features/subject/handlers"
	injector8 "api/internal/features/subject/injector"
	repositories7 "api/internal/features/subject/repositories"
	services8 "api/internal/features/subject/services"
	handlers7 "api/internal/features/user/handlers"
	injector7 "api/internal/features/user/injector"
	"api/internal/features/user/repositories"
	services7 "api/internal/features/user/services"
	"api/pkg/database"
)

// Injectors from crons.go:

func InitUserTokenCron() *cron.UserTokenCron {
	db := database.New()
	userToken := repositories.NewUserToken(db)
	userTokenCron := cron.NewUserTokenCron(userToken)
	return userTokenCron
}

// Injectors from handlers.go:

func InitAttendanceHandlers() *injector.AttendanceHandlers {
	db := database.New()
	attendance := repositories2.NewAttendance(db)
	attendanceDetail := repositories2.NewAttendanceStudent(db)
	student := repositories3.NewStudent(db)
	servicesAttendance := services.NewAttendance(db, attendance, attendanceDetail, student)
	handlersAttendance := handlers.NewAttendance(servicesAttendance)
	lateness := repositories2.NewLateness(db)
	latenessDetail := repositories2.NewLatenessDetail(db)
	major := repositories4.NewMajor(db)
	classroom := repositories5.NewClassroom(db)
	servicesLateness := services.NewLateness(lateness, latenessDetail, student, major, classroom)
	handlersLateness := handlers.NewLateness(servicesLateness)
	generalAttendance := repositories2.NewGeneralAttendance(db)
	generalAttendanceRecord := repositories2.NewGeneralAttendanceRecord(db)
	servicesGeneralAttendance := services.NewGeneralAttendance(db, generalAttendance, generalAttendanceRecord)
	handlersGeneralAttendance := handlers.NewGeneralAttendance(servicesGeneralAttendance)
	batch := repositories6.NewBatch(db)
	subjectAttendance := repositories2.NewSubjectAttendance(db)
	subject := repositories7.NewSubject(db)
	servicesSubjectAttendance := services.NewSubjectAttendance(batch, major, classroom, subjectAttendance, subject)
	handlersSubjectAttendance := handlers.NewSubjectAttendance(servicesSubjectAttendance)
	attendanceHandlers := injector.NewAttendanceHandlers(handlersAttendance, handlersLateness, handlersGeneralAttendance, handlersSubjectAttendance)
	return attendanceHandlers
}

func InitBatchHandlers() *injector2.BatchHandlers {
	db := database.New()
	batch := repositories6.NewBatch(db)
	major := repositories4.NewMajor(db)
	classroom := repositories5.NewClassroom(db)
	servicesBatch := services2.NewBatch(db, batch, major, classroom)
	handlersBatch := handlers2.NewBatch(servicesBatch)
	batchHandlers := injector2.NewBatchHandlers(handlersBatch)
	return batchHandlers
}

func InitMajorHandlers() *injector3.MajorHandlers {
	db := database.New()
	batch := repositories6.NewBatch(db)
	major := repositories4.NewMajor(db)
	servicesMajor := services3.NewMajor(db, batch, major)
	handlersMajor := handlers3.NewMajor(servicesMajor)
	majorHandlers := injector3.NewMajorHandlers(handlersMajor)
	return majorHandlers
}

func InitClassroomHandlers() *injector4.ClassroomHandlers {
	db := database.New()
	batch := repositories6.NewBatch(db)
	major := repositories4.NewMajor(db)
	classroom := repositories5.NewClassroom(db)
	servicesClassroom := services4.NewClassroom(batch, major, classroom)
	handlersClassroom := handlers4.NewClassroom(servicesClassroom)
	classroomHandlers := injector4.NewClassroomHandlers(handlersClassroom)
	return classroomHandlers
}

func InitStudentHandlers() *injector5.StudentHandlers {
	db := database.New()
	major := repositories4.NewMajor(db)
	classroom := repositories5.NewClassroom(db)
	student := repositories3.NewStudent(db)
	servicesStudent := services5.NewStudent(major, classroom, student)
	handlersStudent := handlers5.NewStudent(servicesStudent)
	school := repositories8.NewSchool(db)
	studentToken := repositories3.NewStudentToken(db)
	studentAuth := services5.NewStudentAuth(db, school, student, studentToken)
	handlersStudentAuth := handlers5.NewStudentAuth(studentAuth)
	studentHandlers := injector5.NewStudentHandlers(handlersStudent, handlersStudentAuth)
	return studentHandlers
}

func InitDataHandlers() *injector6.DataHandlers {
	db := database.New()
	batch := repositories6.NewBatch(db)
	major := repositories4.NewMajor(db)
	classroom := repositories5.NewClassroom(db)
	student := repositories3.NewStudent(db)
	excel := services6.NewExcel(batch, major, classroom, student, db)
	handlersExcel := handlers6.NewExcel(excel)
	lateness := repositories2.NewLateness(db)
	reset := services6.NewReset(db, batch, lateness)
	handlersReset := handlers6.NewReset(reset)
	dataHandlers := injector6.NewDataHandlers(handlersExcel, handlersReset)
	return dataHandlers
}

func InitUserHandlers() *injector7.UserHandlers {
	db := database.New()
	user := repositories.NewUser(db)
	userToken := repositories.NewUserToken(db)
	school := repositories8.NewSchool(db)
	auth := services7.NewAuth(user, userToken, school, db)
	handlersAuth := handlers7.NewAuth(auth)
	userHandlers := injector7.NewUserHandlers(handlersAuth)
	return userHandlers
}

func InitSubjectHandlers() *injector8.SubjectHandlers {
	db := database.New()
	subject := repositories7.NewSubject(db)
	servicesSubject := services8.NewSubjectRepo(subject)
	handlersSubject := handlers8.NewSubject(servicesSubject)
	subjectHandlers := injector8.NewSubjectHandlers(handlersSubject)
	return subjectHandlers
}
